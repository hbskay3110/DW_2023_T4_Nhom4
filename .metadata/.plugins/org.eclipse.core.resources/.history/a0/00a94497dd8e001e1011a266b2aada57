package db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import model.DataConfig;
import utils.Const;

public class DaoControl {

    private int executeUpdate(String query, Object... params) {
        int result = 0;

        try (Connection connection = DataSource.getConnection()) {
            if (connection != null) {
                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    setParameters(preparedStatement, params);
                    result = preparedStatement.executeUpdate();
                } catch (SQLException e) {
                    System.out.println("Query execution error: " + e.getMessage());
                }
            }
        } catch (SQLException e) {
            System.out.println("Connection error: " + e.getMessage());
        }

        return result;
    }

    private <T> T executeQuery(String query, ResultSetMapper<T> mapper, Object... params) {
        T result = null;

        try (Connection connection = DataSource.getConnection()) {
            if (connection != null) {
                try (PreparedStatement preparedStatement = connection.prepareStatement(query);
                     ResultSet resultSet = setParametersAndExecuteQuery(preparedStatement, params)) {

                    result = mapper.map(resultSet);
                } catch (SQLException e) {
                    System.out.println("Query execution error: " + e.getMessage());
                }
            }
        } catch (SQLException e) {
            System.out.println("Connection error: " + e.getMessage());
        }

        return result;
    }

    private void setParameters(PreparedStatement preparedStatement, Object... params) throws SQLException {
        for (int i = 0; i < params.length; i++) {
            preparedStatement.setObject(i + 1, params[i]);
        }
    }

    private ResultSet setParametersAndExecuteQuery(PreparedStatement preparedStatement, Object... params)
            throws SQLException {
        setParameters(preparedStatement, params);
        return preparedStatement.executeQuery();
    }

    public int addStatus(int id, String note, String status) {
        String query = "INSERT INTO data_files (id_config, note, status) VALUES (?, ?, ?)";
        return executeUpdate(query, id, note, status);
    }

    public String getStatusToday() {
        String query = "SELECT F.status FROM data_configs AS C "
                + "JOIN data_files AS F ON C.id = F.id_config "
                + "WHERE F.status = 'CE' AND YEAR(F.created_at) = YEAR(NOW()) "
                + "AND MONTH(F.created_at) = MONTH(NOW()) AND DAY(F.created_at) = DAY(NOW()) "
                + "AND C.flag = 1 LIMIT 1";
        return executeQuery(query, rs -> {
            if (rs.next()) {
                return rs.getString("status");
            }
            return null;
        });
    }

    public DataConfig getDataConfig(int id) {
        String query = "SELECT * FROM data_configs AS C WHERE C.flag = 1 AND C.id = ? LIMIT 1";
        return executeQuery(query, rs -> {
            DataConfig dataConfig = new DataConfig();
            if (rs.next()) {
                dataConfig.setId(rs.getInt("id"));
                dataConfig.setFlag(rs.getInt("flag"));
                dataConfig.setCode(rs.getString("code"));
                dataConfig.setSourcePath(rs.getString("source_path"));
                dataConfig.setLocation(rs.getString("location"));
                dataConfig.setFileName(rs.getString("file_name"));
                dataConfig.setFormat(rs.getString("format"));
                dataConfig.setSeparation(rs.getString("separation"));
            }
            return dataConfig;
        }, id);
    }

    private interface ResultSetMapper<T> {
        T map(ResultSet rs) throws SQLException;
    }
}
